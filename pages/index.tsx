import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";
import styles from "../styles/Home.module.css";
import { collection, doc, setDoc, Timestamp } from "firebase/firestore";
import { db } from "../utils/firebase";
import { ChangeEvent, useState } from "react";
import imageCompression from "browser-image-compression";
import { Preview } from "../components/Preview";
import { Message } from "../types";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
	const [preview, setPreview] = useState<Message>({
		beforeMessage: "",
		beforePic: "",
		afterMessage: "",
		afterPic: "",
		from: "",
		date: Timestamp.now(),
		url: "",
	});

	const getBase64 = async (file: File): Promise<string> => {
		// ローカルにある画像ファイルのURLを取得する
		const reader = new FileReader();
		const compressedFile = await imageCompression(file, {
			maxSizeMB: 0.1,
			maxWidthOrHeight: 1920,
			useWebWorker: true,
		});

		reader.readAsDataURL(compressedFile);

		return new Promise((resolve, reject) => {
			reader.onload = (event) => {
				if (typeof event.target?.result === "string")
					resolve(event.target?.result);
				else reject();
			};
			reader.onerror = function (error) {
				console.log("Error: ", error);
				reject();
			};
		});
	};
	return (
		<>
			<Head>
				<title>メッセージを作成</title>
				{/* <meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" /> */}
				<link rel="icon" href="/favicon.ico" />
			</Head>
			{preview.url ? (
				<main className="flex flex-col">
					<div className="text-xl mx-auto my-3 flex flex-col justify-center p-3">
						下記のURLにアクセスするとメッセージが表示されます。
						<div>
							メッセージの表示は
							<span className="underline decoration-[red]">一度きり</span>です。
						</div>
						<div>
							一度表示されたメッセージはデータベースから
							<span className="underline decoration-[red]">削除</span>
							され、同一端末以外では表示できなくなります。
						</div>
					</div>
					<div className="text-center font-bold mb-1 mt-10">
						メッセージのURL
					</div>
					<div className="mx-auto w-[95%] mb-3 flex justify-center">
						<input
							type="text"
							readOnly
							value={preview.url}
							className="p-3 rounded w-2/3"
							onClick={() => {
								if (preview.url) {
									navigator.clipboard.writeText(preview.url);
									alert("URLをクリップボードにコピーしました。");
								}
							}}
						/>
					</div>

					<div className="mx-5 mt-[200px]">
						<p className="text-center text-3xl p-3 mb-4">
							指定日時より前にURLが開かれた場合に表示するメッセージのプレビュー
						</p>
						<Preview
							data={{
								...preview,
								date: Timestamp.fromDate(new Date(Date.now() + 1000 * 24)),
							}}
							hideCreate
						/>
					</div>
					<div className="mx-5 my-[50px]">
						<p className="text-center text-3xl p-3 mb-4">
							指定日時を過ぎてからURLが開かれた場合に表示するメッセージのプレビュー
						</p>
						<Preview
							data={{
								...preview,
								date: Timestamp.fromDate(new Date(Date.now() - 1000 * 24)),
							}}
						/>
					</div>
				</main>
			) : (
				<main className="">
					<div className="text-lg mx-auto my-3 flex justify-center p-3">
						このサイトでは、見るタイミングによって2パターンの異なるメッセージが表示されるページを作成することができます。
						<br />
						日時を指定して、表示されるのがその時間より前か後かで表示するメッセージを変えることができます。
						<br />
						一度表示されたメッセージは削除されるため、2パターンのメッセージを両方見ることはできません。
						<br />
						作成したページのURLを送ってメッセージを伝えましょう。
					</div>
					<form
						onSubmit={async (e: any) => {
							e.preventDefault();
							const obj = preview;
							obj.beforeMessage = e.target[0].value;
							obj.afterMessage = e.target[2].value;
							obj.date = Timestamp.fromDate(new Date(e.target[4].value));
							obj.from = e.target[5].value;

							const ref = doc(collection(db, "message"));
							delete obj.url;
							setDoc(ref, obj).then(() => {
								setDoc(doc(collection(db, "message-before")), obj);
								setPreview({ ...obj, url: `${window.origin}/${ref.id}` });
								window.scrollTo({ top: 0, behavior: "smooth" });
							});
						}}
						className="w-full"
					>
						<div className="text-center font-bold my-3 mt-10">
							指定日時より前にURLが開かれた場合に表示するメッセージ
						</div>
						<textarea
							required
							className="w-[95%] mx-auto my-3 p-2 block rounded border"
							rows={7}
							placeholder="例(指定日時: 1/1 0:00)：本年も大変お世話になりました。来年もよろしくお願いいたします。"
						/>
						<div className="w-[95%] mx-auto my-5 flex flex-col items-center">
							<img src={preview.beforePic} alt={""} className="w-2/3 mb-3" />
							<input
								type="file"
								accept="image/*"
								onChange={async (e: any) => {
									const p = await getBase64(e.target.files[0]);
									setPreview((value) => ({
										...value,
										beforePic: p,
									}));
								}}
							/>
						</div>
						<div className="text-center font-bold my-3 mt-10">
							指定日時を過ぎてからURLが開かれた場合に表示するメッセージ
						</div>
						<textarea
							required
							className="w-[95%] mx-auto my-3 p-2 block rounded border"
							rows={7}
							placeholder="例(指定日時: 1/1 0:00)：明けましておめでとうございます。今年もよろしくお願いします。"
						/>
						<div className="w-[95%] mx-auto my-5 flex flex-col items-center">
							<img src={preview.afterPic} alt={""} className="w-2/3 mb-3" />
							<input
								type="file"
								accept="image/*"
								onChange={async (e: any) => {
									const p = await getBase64(e.target.files[0]);
									setPreview((value) => ({
										...value,
										afterPic: p,
									}));
								}}
							/>
						</div>
						<div className="text-center font-bold my-3 mt-10">日時を指定</div>
						<div className="mx-auto my-3 flex justify-center">
							<input
								type="datetime-local"
								required
								className="p-2 rounded border"
							/>
						</div>
						<div className="text-center font-bold my-3 mt-10">
							表示するあなたの名前
						</div>
						<div className="mx-auto my-3 flex justify-center">
							<input type="text" required className="p-2 rounded border" />
						</div>
						<div className="my-10 flex justify-center items-center h-[100px]">
							<button className="border p-3 rounded-lg px-5 hover:border-2 hover:text-blue-300 hover:border-blue-300">
								この内容でメッセージを作成する
							</button>
						</div>
					</form>
				</main>
			)}
			<footer className="max-w-screen-2xl px-4 md:px-8 mx-auto">
				<div className="flex flex-col items-center border-t pt-6">
					{/* nav - start */}
					<nav className="flex flex-wrap justify-center md:justify-start gap-x-4 gap-y-2 md:gap-6 mb-4">
						<a
							className="text-gray-400 hover:text-indigo-500 active:text-indigo-600 transition duration-100"
							onClick={() => {
								window.open("https://deeper.webbel.net", "_blank");
							}}
						>
							Deeper
						</a>
					</nav>
				</div>

				<div className="text-gray-400 text-sm text-center py-8">
					© 2022 - Webbel(Shu Nagumo)
				</div>
			</footer>
		</>
	);
}
